#### Verify the SCC results using the same genes from the integrated data
#### but with the SCT or RNA slot

setwd("/data/jyc/github_proj/dbit_seq/cell_paper/" )
library(CLIF)
library(Seurat)
library(plyr)
library(Spaniel)

spatial_data <- readRDS("./spatial_seurat_processed_sub.RDS")
spatial_data@meta.data$position <- colnames(spatial_data)
spatial_data@meta.data$cell_types <-spatial_data@meta.data$cell_label_dom
spatial_data@meta.data$cluster <- spatial_data@meta.data$integrated_snn_res.0.8

color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
c_unique_colors <- sample(color,length(unique(spatial_data@meta.data$cell_types)))
names(c_unique_colors) <- unique(spatial_data@meta.data$cell_types)

####################
### Imputation ###
###################
#### case 3:
set.seed(34)
DefaultAssay(spatial_data) <- "SCT"
spatial_data <- RunALRA(spatial_data)

###########################################
#### Visulization of the spatial data ####
###########################################

#### UMAP with the integrated slot
spatial_tmp <- readRDS("./spatial_seurat_processed_sub.RDS")
plot1 <- DimPlot(spatial_tmp,group.by = "cell_label_dom",reduction = "umap",cols =c_unique_colors) + ggtitle("Integrated Data")
plot1


#### UMAP based on the SCT data with it's genes
spatial_data <- FindVariableFeatures(spatial_data,assay = "SCT",selection.method = "vst")
spatial_data <- ScaleData(spatial_data,assay = "SCT")
spatial_data <- RunPCA(spatial_data, assay = "SCT", verbose = FALSE)
spatial_data <- RunUMAP(spatial_data,dims = 1:20, assay = "SCT")
plot3 <- DimPlot(spatial_data,group.by = "cell_types",reduction = "umap",cols =c_unique_colors)
plot3

#### UMAP based on the SCT data with genes from integration
spatial_data_sub <- subset(spatial_data,features = rownames(spatial_data@assays$integrated))
spatial_data_sub <- FindVariableFeatures(spatial_data_sub,assay = "SCT",selection.method = "vst")
spatial_data_sub <- ScaleData(spatial_data_sub,assay = "SCT")
spatial_data_sub <- RunPCA(spatial_data_sub, assay = "SCT", verbose = FALSE)
spatial_data_sub <- RunUMAP(spatial_data_sub,dims = 1:20, assay = "SCT")
plot2 <- DimPlot(spatial_data_sub,group.by = "cell_types",reduction = "umap",cols =c_unique_colors)
plot2

#### UMAP based on ALRA with genes from integration
spatial_data_sub <- FindVariableFeatures(spatial_data_sub,assay = "alra",selection.method = "vst")
spatial_data_sub <- ScaleData(spatial_data_sub,assay = "alra")
spatial_data_sub <- RunPCA(spatial_data_sub, assay = "alra", verbose = FALSE)
spatial_data_sub <- RunUMAP(spatial_data_sub,dims = 1:20, assay = "alra")
plot4 <- DimPlot(spatial_data_sub,group.by = "cell_types",reduction = "umap",cols =c_unique_colors)
plot4


##############################
### Spatial Visualization ###
##############################
coords <- ldply(colnames(spatial_data), function(coords) c(coords,strsplit(coords,'x')[[1]][1],strsplit(coords,'x')[[1]][2]))
rownames(coords) = coords$V1
coords <- coords[,2:3]
colnames(coords) <- c("X","Y")
spatial_data_tmp <-  CreateSeuratObject(counts = spatial_data@assays$RNA@counts, assay="Spatial")
spatial_data_tmp@images$image =  new(
  Class = 'SlideSeq',
  assay = "Spatial",
  key = "image_",
  coordinates = coords
)
spatial_data@images <- spatial_data_tmp@images
rm(spatial_data_tmp)
plot5 <- SpatialDimPlot(spatial_data, crop = T, group.by = "cell_types",stroke = 0.3, cols = c_unique_colors,label = F,pt.size.factor = 5,label.size = 5)
plot5


############################################################
#### SCC based SCT with the genes from integrated slot #####'
###########################################################
expdata <- spatial_data@assays$SCT@data[rownames(spatial_data@assays$integrated),]
metadata_lst=vector(mode="list")
metadata_lst[["position"]] <- spatial_data@meta.data$position
metadata_lst[["cluster"]] <- spatial_data@meta.data$cluster

system.time({clif_obj1 <- clif(exp_mat = expdata,species = "mouse",cell_types_vec = spatial_data@meta.data$cell_types,metadata_lst=metadata_lst,downsampling = FALSE,sample_size_n = 10,autocrine =TRUE,n_threads = 8)})

position_aggregate <- as.vector(clif_obj1@meta.data$position_aggregate)
direct_neighbor_token <- sapply(position_aggregate, function(x){
  pos1 <- strsplit(x,"\\|")[[1]][1]
  pos2 <- strsplit(x,"\\|")[[1]][2]
  pos1 <- c(as.numeric(strsplit(pos1,"x")[[1]][1]),as.numeric(strsplit(pos1,"x")[[1]][2]))
  pos2 <- c(as.numeric(strsplit(pos2,"x")[[1]][1]),as.numeric(strsplit(pos2,"x")[[1]][2]))
  if(sum((pos1 - pos2) ^ 2) <= 1){
    return(TRUE)
  }
  else{return(FALSE)}
})

names(direct_neighbor_token) <- colnames(clif_obj1)
spatial_clif1 <- subset(clif_obj1,cells = colnames(clif_obj1)[direct_neighbor_token])
spatial_clif1 <- Seurat::FindVariableFeatures(spatial_clif1, selection.method = "vst")
spatial_clif1 <- Seurat::ScaleData(spatial_clif1)
spatial_clif1 <- Seurat::RunPCA(spatial_clif1,features = Seurat::VariableFeatures(object = spatial_clif1),seed.use = 34)
spatial_clif1 <- ReductionWrappers::DoopenTSNE(object=spatial_clif1,reduction_use = "pca",reduction_save = "openTSNE",dims_use = 1:20,random_state=as.integer(34))
plot6 <- Seurat::DimPlot(spatial_clif1, reduction = "openTSNE",group.by="cp_types")+NoLegend()
plot6

############################################################
#### SCC based ALRA with the genes from integrated slot #####'
###########################################################

expdata <- spatial_data@assays$alra@data[rownames(spatial_data@assays$integrated),]
metadata_lst=vector(mode="list")
metadata_lst[["position"]] <- spatial_data@meta.data$position
metadata_lst[["cluster"]] <- spatial_data@meta.data$cluster

system.time({clif_obj3 <- clif(exp_mat = expdata,species = "mouse",cell_types_vec = spatial_data@meta.data$cell_types,metadata_lst=metadata_lst,downsampling = FALSE,sample_size_n = 10,autocrine =TRUE,n_threads = 8)})

position_aggregate <- as.vector(clif_obj3@meta.data$position_aggregate)
direct_neighbor_token <- sapply(position_aggregate, function(x){
  pos1 <- strsplit(x,"\\|")[[1]][1]
  pos2 <- strsplit(x,"\\|")[[1]][2]
  pos1 <- c(as.numeric(strsplit(pos1,"x")[[1]][1]),as.numeric(strsplit(pos1,"x")[[1]][2]))
  pos2 <- c(as.numeric(strsplit(pos2,"x")[[1]][1]),as.numeric(strsplit(pos2,"x")[[1]][2]))
  if(sum((pos1 - pos2) ^ 2) <= 1){
    return(TRUE)
  }
  else{return(FALSE)}
})

names(direct_neighbor_token) <- colnames(clif_obj3)
spatial_clif3 <- subset(clif_obj3,cells = colnames(clif_obj3)[direct_neighbor_token])
table(spatial_clif3@meta.data$cp_types)

#### Continue analysis with spatial_clif3
spatial_clif3 <- Seurat::FindVariableFeatures(spatial_clif3, selection.method = "vst")
spatial_clif3 <- Seurat::ScaleData(spatial_clif3)
spatial_clif3 <- Seurat::RunPCA(spatial_clif3,features = Seurat::VariableFeatures(object = spatial_clif3),seed.use = 34)
spatial_clif3 <- ReductionWrappers::DoopenTSNE(object=spatial_clif3,reduction_use = "pca",reduction_save = "openTSNE",dims_use = 1:20,random_state=as.integer(34))
plot7 <- Seurat::DimPlot(spatial_clif3, reduction = "openTSNE",group.by="cp_types")+NoLegend()
plot7

#### Visualization for each cell type
spatial_data@meta.data$cell_types <- factor(spatial_data@meta.data$cell_types)
cell_types <- levels(spatial_data@meta.data$cell_types)
plot_percp3 <- vector(mode="list",length = length(cell_types))
for(i in c(1:length(cell_types))){
  cell_type <- cell_types[i]

  old_cell_pair_type <- as.character(spatial_clif3@meta.data$cp_types)
  new_cell_pair_type <- as.character(spatial_clif3@meta.data$cp_types)
  for(j in 1:length(old_cell_pair_type)){
    cp_type <- unlist(strsplit(old_cell_pair_type[j],split = "\\|"))
    if(cell_type !=cp_type[1] & cell_type != cp_type[2]) new_cell_pair_type[j] <- "others"
  }

  spatial_clif3@meta.data$tmp_cp_types <- new_cell_pair_type

  cp_colors_names <- c(paste0(cell_type,"|",cell_types[-i]),paste0(cell_types,"|",cell_type))
  color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
  cp_colors_new <- sample(color,length(cp_colors_names))
  names(cp_colors_new) <- cp_colors_names

  cp_colors_new['others'] <- "grey"
  plot_percp3[[i]] <- Seurat::DimPlot(spatial_clif3, reduction = "openTSNE",group.by="tmp_cp_types",pt.size = 1,cols = cp_colors_new)+ggtitle(cell_type)
  #ggplot2::ggsave(filename = paste("./temp/",i,".jpeg"),plot = plot_tmp,width = 20,height = 15)
}
names(plot_percp3) <- cell_types
plot_percp3[[3]]
plot_percp3[[4]]
plot_percp3[[5]]
plot_percp3[[10]]
plot_percp3[[15]]

#### only show the significant cell pairs
cp_types2show <- sapply(c(3,4,5,10,15), function(i) paste0(cell_types[i],"|",cell_types[i]))
new_cell_pair_type <- as.character(spatial_clif3@meta.data$cp_types)
for(j in 1:length(new_cell_pair_type)){
  if(!(new_cell_pair_type[j] %in% cp_types2show)) new_cell_pair_type[j] <- "others"
}
spatial_clif3@meta.data$tmp_cp_types <- new_cell_pair_type
cp_types2color <- sample(color,size=length(cp_types2show))
names(cp_types2color) <- cp_types2show
cp_types2color['others'] <- "grey"
plot8 <- Seurat::DimPlot(spatial_clif3, reduction = "openTSNE",group.by="tmp_cp_types",pt.size = 1,cols = cp_types2color)+ggtitle("Notable Cell Pair types")
plot8

###### Find markers for significant cell pairs
Idents(spatial_clif3) <- spatial_clif3@meta.data$cp_types
spatial_clif3.markers <- FindAllMarkers(spatial_clif3, only.pos = TRUE,random.seed = 34)
top5.spatial_clif3 <- spatial_clif3.markers %>% group_by(cluster) %>% top_n(n = 5, wt = avg_logFC)

#### show how the Ligands and Receptors are expressed using the ALRA slot
DefaultAssay(spatial_data) <- "alra"
FeaturePlot(spatial_clif3,features = top5.spatial_clif3$gene[top5.spatial_clif3$cluster == "Excitatory neuron|Excitatory neuron"])
p1 <- vector(mode="list",length = 20)
p1[[1]] <- SpatialFeaturePlot(spatial_data, features = c("Cntn2"), crop = T,pt.size.factor = 5) #+ NoLegend()
p1[[2]] <- SpatialFeaturePlot(spatial_data, features = c("Nrcam"), crop = T,pt.size.factor = 5) #+ NoLegend()
p1[[3]] <- SpatialFeaturePlot(spatial_data, features = c("Ncam1"), crop = T,pt.size.factor = 5) #+ NoLegend()
p1[[4]] <- SpatialFeaturePlot(spatial_data, features = c("Robo1"), crop = T,pt.size.factor = 5) #+ NoLegend()
p1[[5]] <- SpatialFeaturePlot(spatial_data, features = c("Gfra1"), crop = T,pt.size.factor = 5) #+ NoLegend()
p1[[6]] <- SpatialFeaturePlot(spatial_data, features = c("Ncan"), crop = T,pt.size.factor = 5) #+ NoLegend()
p1[[7]] <- SpatialFeaturePlot(spatial_data, features = c("Dscam"), crop = T,pt.size.factor = 5) #+ NoLegend()
p1[[8]] <- SpatialFeaturePlot(spatial_data, features = c("Dcc"), crop = T,pt.size.factor = 5) #+ NoLegend()
p1[[9]] <- SpatialFeaturePlot(spatial_data, features = c("Cdh2"), crop = T,pt.size.factor = 5) #+ NoLegend()

DefaultAssay(spatial_data) <- "SCT"
p1_ref <- vector(mode="list",length = 20)
p1_ref[[1]] <- SpatialFeaturePlot(spatial_data, features = c("Cntn2"), crop = T,pt.size.factor = 5) #+ NoLegend()
p1_ref[[2]] <- SpatialFeaturePlot(spatial_data, features = c("Nrcam"), crop = T,pt.size.factor = 5) #+ NoLegend()
p1_ref[[3]] <- SpatialFeaturePlot(spatial_data, features = c("Ncam1"), crop = T,pt.size.factor = 5) #+ NoLegend()
p1_ref[[4]] <- SpatialFeaturePlot(spatial_data, features = c("Robo1"), crop = T,pt.size.factor = 5) #+ NoLegend()
p1_ref[[5]] <- SpatialFeaturePlot(spatial_data, features = c("Gfra1"), crop = T,pt.size.factor = 5) #+ NoLegend()
p1_ref[[6]] <- SpatialFeaturePlot(spatial_data, features = c("Ncan"), crop = T,pt.size.factor = 5) #+ NoLegend()
p1_ref[[7]] <- SpatialFeaturePlot(spatial_data, features = c("Dscam"), crop = T,pt.size.factor = 5) #+ NoLegend()
p1_ref[[8]] <- SpatialFeaturePlot(spatial_data, features = c("Dcc"), crop = T,pt.size.factor = 5) #+ NoLegend()
p1_ref[[9]] <- SpatialFeaturePlot(spatial_data, features = c("Cdh2"), crop = T,pt.size.factor = 5) #+ NoLegend()

c_unique_colors2 <- rep("grey",length(unique(spatial_data@meta.data$cell_types)))
names(c_unique_colors2) <- unique(spatial_data@meta.data$cell_types)
c_unique_colors2['Excitatory neuron'] <- "red"
p31 <- SpatialDimPlot(spatial_data, crop = T, group.by = "cell_types", cols = c_unique_colors2,label = F,pt.size.factor = 5,)+ NoLegend()+ggtitle("") +theme(plot.title = element_text(size = 32, face = "bold"))
p31
grid.arrange(p1[[3]]+ggtitle("ALRA"),p1[[5]]+ggtitle("ALRA"),p1_ref[[3]]+ggtitle("noALRA"),p1_ref[[5]]+ggtitle("noALRA"),nrow=2)
grid.arrange(p1[[1]]+ggtitle("ALRA"),p1[[2]]+ggtitle("ALRA"),p1_ref[[1]]+ggtitle("noALRA"),p1_ref[[2]]+ggtitle("noALRA"),nrow=2)
grid.arrange(p1[[7]]+ggtitle("ALRA"),p1[[8]]+ggtitle("ALRA"),p1_ref[[7]]+ggtitle("noALRA"),p1_ref[[8]]+ggtitle("noALRA"),nrow=2)
grid.arrange(p1[[6]]+ggtitle("ALRA"),p1[[9]]+ggtitle("ALRA"),p1_ref[[6]]+ggtitle("noALRA"),p1_ref[[9]]+ggtitle("noALRA"),nrow=2)
grid.arrange(p1[[3]]+ggtitle("ALRA"),p1[[4]]+ggtitle("ALRA"),p1_ref[[3]]+ggtitle("noALRA"),p1_ref[[4]]+ggtitle("noALRA"),nrow=2)


#### "Ganglion neuron|Ganglion neuron"
DefaultAssay(spatial_data) <- "alra"
FeaturePlot(spatial_clif3,features = top5.spatial_clif3$gene[top5.spatial_clif3$cluster == "Ganglion neuron|Ganglion neuron"])
p2 <- vector(mode="list",length = 20)
p2[[1]] <- SpatialFeaturePlot(spatial_data, features = c("Cntn2"), crop = T,pt.size.factor = 5)
p2[[2]] <-SpatialFeaturePlot(spatial_data, features = c("Nrp1"), crop = T,pt.size.factor = 5)
p2[[3]] <-SpatialFeaturePlot(spatial_data, features = c("Jag1"), crop = T,pt.size.factor = 5)
p2[[4]] <-SpatialFeaturePlot(spatial_data, features = c("Notch1"), crop = T,pt.size.factor = 5)
p2[[5]] <-SpatialFeaturePlot(spatial_data, features = c("Farp2"), crop = T,pt.size.factor = 5)
p2[[6]] <-SpatialFeaturePlot(spatial_data, features = c("Plxna4"), crop = T,pt.size.factor = 5)
#p2[[7]] <-SpatialFeaturePlot(spatial_data, features = c("Ptpra"), crop = T,pt.size.factor = 5)

DefaultAssay(spatial_data) <- "SCT"
p2_ref <- vector(mode="list",length = 20)
p2_ref[[1]] <- SpatialFeaturePlot(spatial_data, features = c("Cntn2"), crop = T,pt.size.factor = 5)
p2_ref[[2]] <-SpatialFeaturePlot(spatial_data, features = c("Nrp1"), crop = T,pt.size.factor = 5)
p2_ref[[3]] <-SpatialFeaturePlot(spatial_data, features = c("Jag1"), crop = T,pt.size.factor = 5)
p2_ref[[4]] <-SpatialFeaturePlot(spatial_data, features = c("Notch1"), crop = T,pt.size.factor = 5)
p2_ref[[5]] <-SpatialFeaturePlot(spatial_data, features = c("Farp2"), crop = T,pt.size.factor = 5)
p2_ref[[6]] <-SpatialFeaturePlot(spatial_data, features = c("Plxna4"), crop = T,pt.size.factor = 5)
p2_ref[[7]] <-SpatialFeaturePlot(spatial_data, features = c("Ptpra"), crop = T,pt.size.factor = 5)


c_unique_colors2 <- rep("grey",length(unique(spatial_data@meta.data$cell_types)))
names(c_unique_colors2) <- unique(spatial_data@meta.data$cell_types)
c_unique_colors2['Ganglion neuron'] <- "red"
c_unique_colors2['Excitatory neuron'] <- "blue"
p32 <- SpatialDimPlot(spatial_data, crop = T, group.by = "cell_types", cols = c_unique_colors2,label = F,pt.size.factor = 5,)
p32

grid.arrange(p2[[1]]+ggtitle("ALRA"),p2[[2]]+ggtitle("ALRA"),
             p2_ref[[1]]+ggtitle("noALRA"),p2_ref[[2]]+ggtitle("noALRA"),
             nrow=2)
grid.arrange(p2[[3]]+ggtitle("ALRA"),p2[[4]]+ggtitle("ALRA"),
             p2_ref[[3]]+ggtitle("noALRA"),p2_ref[[4]]+ggtitle("noALRA"),
             nrow=2)
grid.arrange(p2[[5]]+ggtitle("ALRA"),p2[[6]]+ggtitle("ALRA"),
             p2_ref[[5]]+ggtitle("noALRA"),p2_ref[[6]]+ggtitle("noALRA"),
             nrow=2)
CLIF::ncomms8866_mouse$Receptor.ApprovedSymbol[CLIF::ncomms8866_mouse$Ligand.ApprovedSymbol == "Cntn2"]


#####################################################################
###check whether the receivers for each sender cell has the same type ####
#####################################################################
receiver_type_df <- data.frame(senderId=spatial_clif3@meta.data$sender_cell,
                               receiver_types=spatial_clif3@meta.data$receiver_type)
#### group by the sender cells
grouped_re_df <- split.data.frame(receiver_type_df,receiver_type_df$senderId)
#### check whether each group have the same receiver type
same_receiver_type_indicator <- sapply(1:length(grouped_re_df),function(i) length(unique(grouped_re_df[[i]]$receiver_types)) == 1)


#################################
#### Ligand Niche embeddings ####
#################################
### note that the group by reorders the rownames of niche_mat3 and grouped_re_df, but they are the same order
### so the dimplot with the indicator color is correct
niche_mat1 <- rowsum(as.matrix(t(spatial_clif1@assays$RNA@data)), group=spatial_clif1@meta.data$sender_cell)

niche_mat3 <- rowsum(as.matrix(t(spatial_clif3@assays$RNA@data)), group=spatial_clif3@meta.data$sender_cell)


input_meta <- as.data.frame(spatial_data@meta.data$cell_types)
rownames(input_meta) <- colnames(spatial_data)
colnames(input_meta) <- c("cell_types")

niche.clif1 <- CreateSeuratObject(counts=t(niche_mat1),meta.data=input_meta)
niche.clif1 <- Seurat::FindVariableFeatures(niche.clif1, selection.method = "vst")
niche.clif1 <- Seurat::ScaleData(niche.clif1)
niche.clif1 <- Seurat::RunPCA(niche.clif1,features = Seurat::VariableFeatures(object = niche.clif1),seed.use = 34)
niche.clif1 <- ReductionWrappers::DoopenTSNE(object=niche.clif1,reduction_use = "pca",reduction_save = "openTSNE",dims_use = 1:20,random_state=as.integer(34))
plot9 <- Seurat::DimPlot(niche.clif1, reduction = "openTSNE",group.by="cell_types",cols = c_unique_colors)+ggtitle("Ligand Niche -- NoALRA")
plot9



niche.clif3 <- CreateSeuratObject(counts=t(niche_mat3),meta.data=input_meta)
niche.clif3 <- Seurat::FindVariableFeatures(niche.clif3, selection.method = "vst")
niche.clif3 <- Seurat::ScaleData(niche.clif3)
niche.clif3 <- Seurat::RunPCA(niche.clif3,features = Seurat::VariableFeatures(object = niche.clif3),seed.use = 34)
niche.clif3 <- ReductionWrappers::DoopenTSNE(object=niche.clif3,reduction_use = "pca",reduction_save = "openTSNE",dims_use = 1:20,random_state=as.integer(34))
niche.clif3@meta.data$same_receiver_type_check <- same_receiver_type_indicator
plot10 <- Seurat::DimPlot(niche.clif3, reduction = "openTSNE",group.by="cell_types",cols = c_unique_colors)+ggtitle("Ligand Niche -- ALRA")
plot10

grid.arrange(plot9,plot10,nrow=1)


plot11 <- Seurat::DimPlot(niche.clif3, reduction = "openTSNE",group.by="same_receiver_type_check")+ggtitle("Same Receiver Check")
plot11
#grid.arrange(plot10,plot10.5,nrow=1)

#### Find Neighbors, clustering, find markers
niche.clif3 <- FindNeighbors(niche.clif3)
niche.clif3 <- FindClusters(niche.clif3, resolution = 0.5)
plot12 <- Seurat::DimPlot(niche.clif3, reduction = "openTSNE")+ggtitle("Clustering")
plot12

grid.arrange(plot11,plot12,nrow=1)

Idents(niche.clif3) <- niche.clif3@meta.data$cell_types
niche.clif3.markers <- FindAllMarkers(niche.clif3, only.pos = TRUE,random.seed = 34)
top5.niche.clif3 <- niche.clif3.markers %>% group_by(cluster) %>% top_n(n = 5, wt = avg_logFC)

FeaturePlot(niche.clif3,features = top5.niche.clif3$gene[top5.niche.clif3$cluster == "Excitatory neuron"])
FeaturePlot(niche.clif3,features = top5.niche.clif3$gene[top5.niche.clif3$cluster == "Ganglion neuron"])



