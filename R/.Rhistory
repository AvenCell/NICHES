# Identify celltypes
celltypes <- names(table(Idents(sys.small)))
# Ligand dataset
lig.list <- list()
for (i in 1:length(celltypes)){
temp <- subset(sys.small,idents = celltypes[i])
lig.list[[i]] <- temp@assays[[assay]]@data[ligands,]
}
# Receptor dataset
rec.list <- list()
for (i in 1:length(celltypes)){
temp <- subset(sys.small,idents = celltypes[i])
rec.list[[i]] <- temp@assays[[assay]]@data[receptors,]
}
# For each celltype, create all the outgoing edges
# (to all celltypes -- this covers autocrine AND bi-directional signaling)
lig.data <- list()
rec.data <- list()
scc.data <- list()
sending.cell.idents <- list()
receiving.cell.idents <- list()
for (i in 1:length(celltypes)){
# Define maximum number of comparisons for each pairing
num <- as.data.frame(table(Idents(sys.small)))
num$sender.freq <- ncol(lig.list[[i]])
rownames(num) <- num$Var1
num <- num[,-1]
num <- num %>% rowwise() %>% mutate(max.possible = min(Freq, sender.freq))
# Craft the ligand side for a single sender to all other types
lig.temp <- list()
for (j in 1:length(celltypes)){ # here 'j' is every receiving cell type
lig.temp[[j]] <- lig.list[[i]][,sample(ncol(lig.list[[i]]), size = num[j,]$max.possible), drop = FALSE]
}
lig.data[[i]] <- do.call(cbind,lig.temp)
# Craft the receptor side for a single sender to all other types
rec.temp <- list()
for (j in 1:length(celltypes)){
rec.temp[[j]] <- rec.list[[j]][,sample(ncol(rec.list[[j]]), size = num[j,]$max.possible), drop = FALSE]
}
rec.data[[i]] <- do.call(cbind,rec.temp)
# Combine into partial SCC matrix
scc.data[[i]] <- lig.data[[i]]*rec.data[[i]]
rownames(scc.data[[i]]) <- paste(rownames(lig.data[[i]]),rownames(rec.data[[i]]),sep = '-')
colnames(scc.data[[i]]) <- paste(colnames(lig.data[[i]]),colnames(rec.data[[i]]),sep = '-')
sending.cell.idents[[i]] <- as.character(Idents(sys.small)[colnames(lig.data[[i]])])
receiving.cell.idents[[i]] <- as.character(Idents(sys.small)[colnames(rec.data[[i]])])
}
# Combine all of these to make the full SCC matrix
scc <- do.call(cbind,scc.data)
#Use this matrix to create a Seurat object:
demo <- CreateSeuratObject(counts = as.matrix(scc),assay = 'CellToCell')
# Gather and assemble metadata based on "ident" slot
sending.cell.idents.2 <- do.call(c,sending.cell.idents)
receiving.cell.idents.2 <- do.call(c,receiving.cell.idents)
meta.data.to.add <- data.frame(SendingType = sending.cell.idents.2,
ReceivingType = receiving.cell.idents.2)
rownames(meta.data.to.add) <- colnames(scc)
meta.data.to.add$VectorType <- paste(meta.data.to.add$SendingType,
meta.data.to.add$ReceivingType,
sep = '-')
#Add ident metadata
demo <- AddMetaData(demo,metadata = meta.data.to.add)
# Gather and assemble additional metadata
if (!is.null(meta.data.to.map)){
# Identify sending and receiving barcodes
sending.barcodes <- colnames(do.call(cbind,lig.data)) #This can be simplified if the above SCC construction is simplified
receiving.barcodes <- colnames(do.call(cbind,rec.data)) #This can be simplified if the above SCC construction is simplified
# Pull and format sending and receiving metadata
sending.metadata <- as.matrix(object@meta.data[,meta.data.to.map][sending.barcodes,])
receiving.metadata <- as.matrix(object@meta.data[,meta.data.to.map][receiving.barcodes,])
# Make joint metadata
datArray <- abind(sending.metadata,receiving.metadata,along=3)
joint.metadata <- as.matrix(apply(datArray,1:2,function(x)paste(x[1],"-",x[2])))
# Define column names
colnames(joint.metadata) <- paste(colnames(sending.metadata),'Joint',sep = '.')
colnames(sending.metadata) <- paste(colnames(sending.metadata),'Sending',sep='.')
colnames(receiving.metadata) <- paste(colnames(receiving.metadata),'Receiving',sep='.')
# Compile
meta.data.to.add.also <- cbind(sending.metadata,receiving.metadata,joint.metadata)
rownames(meta.data.to.add.also) <- paste(sending.barcodes,receiving.barcodes,sep='-')
# Add additional metadata
demo <- AddMetaData(demo,metadata = as.data.frame(meta.data.to.add.also))
}
# How many vectors were captured by this sampling?
message(paste("\n",length(unique(demo$VectorType)),'distinct VectorTypes were computed, out of',length(table(Idents(sys.small)))^2,'total possible'))
return(demo)
}
# Testing runs
test <- RunSCC(FFPE2,species = 'mouse',position.x = 'x',position.y = 'y',
CellToCell = T,CellToSystem = T,SystemToCell = T,
CellToCellSpatial = F,CellToNeighborhood = F,NeighborhoodToCell = F,meta.data.to.map = c('nCount_SCT','orig.ident')) #works
RunCellToCell <- function(object,
LR.database = 'fantom5',
species,
assay = 'RNA',
min.cells.per.ident = 1,
meta.data.to.map = NULL){
require(Seurat)
require(dplyr)
require(abind)
# Check if setup is correct
if (class(LR.database) == 'character'){
if (LR.database == 'fantom5' & is.null(species)){stop("\nPlease select species for FANTOM5 mapping. Allows 'human','mouse','rat', or 'pig' ")}
}else{}
# Set default assay (not necessary, but just in case)
DefaultAssay(object) <- assay
# Stash object
sys.small <- object
# Limit object to cell populations larger than requested minimum
if (!is.null(min.cells.per.ident)){
message(paste("\n",'Subsetting to populations with greater than',min.cells.per.ident,'cells'))
idents.include <- names(table(Idents(sys.small)))[table(Idents(sys.small)) > min.cells.per.ident]
sys.small <- subset(sys.small,idents = idents.include)
}
num.cells <- ncol(sys.small)
message(paste("\n",num.cells,'distinct cells from',length(names(table(Idents(sys.small)))),'celltypes to be analyzed'))
# Identify paired ligands and receptors in the dataset to map against
if(class(LR.database) == 'character'){
if (LR.database == 'fantom5'){
# Load ground-truth database (FANTOM5, species-converted as appropriate, per methodlogy in Raredon et al 2019, DOI: 10.1126/sciadv.aaw3851)
if (species == 'human'){
fantom <- Connectome::ncomms8866_human
}
if (species == 'mouse'){
fantom <- Connectome::ncomms8866_mouse
}
if (species == 'rat'){
fantom <- Connectome::ncomms8866_rat
}
if (species == 'pig'){
fantom <- Connectome::ncomms8866_pig
}}}else{
num.mechs <- nrow(LR.database)
message(paste("\n","Custom mapping requested. Mapping cells against",num.mechs,"mechanisms provided via LR.database argument"))
fantom <- data.frame(Ligand.ApprovedSymbol = as.character(LR.database[,1]),
Receptor.ApprovedSymbol = as.character(LR.database[,2]))
}
# Subset to only mechanisms present in the object
fantom.specific <- subset(fantom,
Ligand.ApprovedSymbol %in% rownames(sys.small@assays[[assay]]) & Receptor.ApprovedSymbol %in% rownames(sys.small@assays[[assay]]))
ligands <- fantom.specific$Ligand.ApprovedSymbol
receptors <- fantom.specific$Receptor.ApprovedSymbol
### CREATE MAPPING ###
# Identify celltypes
celltypes <- names(table(Idents(sys.small)))
# Ligand dataset
lig.list <- list()
for (i in 1:length(celltypes)){
temp <- subset(sys.small,idents = celltypes[i])
lig.list[[i]] <- temp@assays[[assay]]@data[ligands,]
}
# Receptor dataset
rec.list <- list()
for (i in 1:length(celltypes)){
temp <- subset(sys.small,idents = celltypes[i])
rec.list[[i]] <- temp@assays[[assay]]@data[receptors,]
}
# For each celltype, create all the outgoing edges
# (to all celltypes -- this covers autocrine AND bi-directional signaling)
lig.data <- list()
rec.data <- list()
scc.data <- list()
sending.cell.idents <- list()
receiving.cell.idents <- list()
for (i in 1:length(celltypes)){
# Define maximum number of comparisons for each pairing
num <- as.data.frame(table(Idents(sys.small)))
num$sender.freq <- ncol(lig.list[[i]])
rownames(num) <- num$Var1
num <- num[,-1]
num <- num %>% rowwise() %>% mutate(max.possible = min(Freq, sender.freq))
# Craft the ligand side for a single sender to all other types
lig.temp <- list()
for (j in 1:length(celltypes)){ # here 'j' is every receiving cell type
lig.temp[[j]] <- lig.list[[i]][,sample(ncol(lig.list[[i]]), size = num[j,]$max.possible), drop = FALSE]
}
lig.data[[i]] <- do.call(cbind,lig.temp)
# Craft the receptor side for a single sender to all other types
rec.temp <- list()
for (j in 1:length(celltypes)){
rec.temp[[j]] <- rec.list[[j]][,sample(ncol(rec.list[[j]]), size = num[j,]$max.possible), drop = FALSE]
}
rec.data[[i]] <- do.call(cbind,rec.temp)
# Combine into partial SCC matrix
scc.data[[i]] <- lig.data[[i]]*rec.data[[i]]
rownames(scc.data[[i]]) <- paste(rownames(lig.data[[i]]),rownames(rec.data[[i]]),sep = '-')
colnames(scc.data[[i]]) <- paste(colnames(lig.data[[i]]),colnames(rec.data[[i]]),sep = '-')
sending.cell.idents[[i]] <- as.character(Idents(sys.small)[colnames(lig.data[[i]])])
receiving.cell.idents[[i]] <- as.character(Idents(sys.small)[colnames(rec.data[[i]])])
}
# Combine all of these to make the full SCC matrix
scc <- do.call(cbind,scc.data)
#Use this matrix to create a Seurat object:
demo <- CreateSeuratObject(counts = as.matrix(scc),assay = 'CellToCell')
# Gather and assemble metadata based on "ident" slot
sending.cell.idents.2 <- do.call(c,sending.cell.idents)
receiving.cell.idents.2 <- do.call(c,receiving.cell.idents)
meta.data.to.add <- data.frame(SendingType = sending.cell.idents.2,
ReceivingType = receiving.cell.idents.2)
rownames(meta.data.to.add) <- colnames(scc)
meta.data.to.add$VectorType <- paste(meta.data.to.add$SendingType,
meta.data.to.add$ReceivingType,
sep = '-')
#Add ident metadata
demo <- AddMetaData(demo,metadata = meta.data.to.add)
# Gather and assemble additional metadata
if (!is.null(meta.data.to.map)){
# Identify sending and receiving barcodes
sending.barcodes <- colnames(do.call(cbind,lig.data)) #This can be simplified if the above SCC construction is simplified
receiving.barcodes <- colnames(do.call(cbind,rec.data)) #This can be simplified if the above SCC construction is simplified
# Pull and format sending and receiving metadata
sending.metadata <- as.matrix(object@meta.data[,meta.data.to.map][sending.barcodes,])
receiving.metadata <- as.matrix(object@meta.data[,meta.data.to.map][receiving.barcodes,])
# Make joint metadata
datArray <- abind(sending.metadata,receiving.metadata,along=3)
joint.metadata <- as.matrix(apply(datArray,1:2,function(x)paste(x[1],"-",x[2])))
# Define column names
colnames(joint.metadata) <- paste(colnames(sending.metadata),'Joint',sep = '.')
colnames(sending.metadata) <- paste(colnames(sending.metadata),'Sending',sep='.')
colnames(receiving.metadata) <- paste(colnames(receiving.metadata),'Receiving',sep='.')
# Compile
meta.data.to.add.also <- cbind(sending.metadata,receiving.metadata,joint.metadata)
rownames(meta.data.to.add.also) <- paste(sending.barcodes,receiving.barcodes,sep='-')
# Add additional metadata
demo <- AddMetaData(demo,metadata = as.data.frame(meta.data.to.add.also))
}
# How many vectors were captured by this sampling?
message(paste("\n",length(unique(demo$VectorType)),'distinct VectorTypes were computed, out of',length(table(Idents(sys.small)))^2,'total possible'))
return(demo)
}
ncol(test)
# Testing runs
test <- RunSCC(FFPE2,species = 'mouse',position.x = 'x',position.y = 'y',
CellToCell = T,CellToSystem = T,SystemToCell = T,
CellToCellSpatial = F,CellToNeighborhood = F,NeighborhoodToCell = F,meta.data.to.map = c('nCount_SCT','orig.ident')) #works
test
test[[1]]
ncol(test[[1]])
RunCellToCell <- function(object,
LR.database = 'fantom5',
species,
assay = 'RNA',
min.cells.per.ident = 1,
meta.data.to.map = NULL){
require(Seurat)
require(dplyr)
require(abind)
# Check if setup is correct
if (class(LR.database) == 'character'){
if (LR.database == 'fantom5' & is.null(species)){stop("\nPlease select species for FANTOM5 mapping. Allows 'human','mouse','rat', or 'pig' ")}
}else{}
# Set default assay (not necessary, but just in case)
DefaultAssay(object) <- assay
# Stash object
sys.small <- object
# Limit object to cell populations larger than requested minimum
if (!is.null(min.cells.per.ident)){
message(paste("\n",'Subsetting to populations with greater than',min.cells.per.ident,'cells'))
idents.include <- names(table(Idents(sys.small)))[table(Idents(sys.small)) > min.cells.per.ident]
sys.small <- subset(sys.small,idents = idents.include)
}
num.cells <- ncol(sys.small)
message(paste("\n",num.cells,'distinct cells from',length(names(table(Idents(sys.small)))),'celltypes to be analyzed'))
# Identify paired ligands and receptors in the dataset to map against
if(class(LR.database) == 'character'){
if (LR.database == 'fantom5'){
# Load ground-truth database (FANTOM5, species-converted as appropriate, per methodlogy in Raredon et al 2019, DOI: 10.1126/sciadv.aaw3851)
if (species == 'human'){
fantom <- Connectome::ncomms8866_human
}
if (species == 'mouse'){
fantom <- Connectome::ncomms8866_mouse
}
if (species == 'rat'){
fantom <- Connectome::ncomms8866_rat
}
if (species == 'pig'){
fantom <- Connectome::ncomms8866_pig
}}}else{
num.mechs <- nrow(LR.database)
message(paste("\n","Custom mapping requested. Mapping cells against",num.mechs,"mechanisms provided via LR.database argument"))
fantom <- data.frame(Ligand.ApprovedSymbol = as.character(LR.database[,1]),
Receptor.ApprovedSymbol = as.character(LR.database[,2]))
}
# Subset to only mechanisms present in the object
fantom.specific <- subset(fantom,
Ligand.ApprovedSymbol %in% rownames(sys.small@assays[[assay]]) & Receptor.ApprovedSymbol %in% rownames(sys.small@assays[[assay]]))
ligands <- fantom.specific$Ligand.ApprovedSymbol
receptors <- fantom.specific$Receptor.ApprovedSymbol
### CREATE MAPPING ###
# Identify celltypes
celltypes <- names(table(Idents(sys.small)))
# Ligand dataset
lig.list <- list()
for (i in 1:length(celltypes)){
temp <- subset(sys.small,idents = celltypes[i])
lig.list[[i]] <- temp@assays[[assay]]@data[ligands,]
}
# Receptor dataset
rec.list <- list()
for (i in 1:length(celltypes)){
temp <- subset(sys.small,idents = celltypes[i])
rec.list[[i]] <- temp@assays[[assay]]@data[receptors,]
}
# For each celltype, create all the outgoing edges
# (to all celltypes -- this covers autocrine AND bi-directional signaling)
lig.data <- list()
rec.data <- list()
scc.data <- list()
sending.cell.idents <- list()
receiving.cell.idents <- list()
for (i in 1:length(celltypes)){
# Define maximum number of comparisons for each pairing
num <- as.data.frame(table(Idents(sys.small)))
num$sender.freq <- ncol(lig.list[[i]])
rownames(num) <- num$Var1
num <- num[,-1]
num <- num %>% rowwise() %>% mutate(max.possible = min(Freq, sender.freq))
# Craft the ligand side for a single sender to all other types
lig.temp <- list()
for (j in 1:length(celltypes)){ # here 'j' is every receiving cell type
lig.temp[[j]] <- lig.list[[i]][,sample(ncol(lig.list[[i]]), size = num[j,]$max.possible), drop = FALSE]
}
lig.data[[i]] <- do.call(cbind,lig.temp)
# Craft the receptor side for a single sender to all other types
rec.temp <- list()
for (j in 1:length(celltypes)){
rec.temp[[j]] <- rec.list[[j]][,sample(ncol(rec.list[[j]]), size = num[j,]$max.possible), drop = FALSE]
}
rec.data[[i]] <- do.call(cbind,rec.temp)
# Combine into partial SCC matrix
scc.data[[i]] <- lig.data[[i]]*rec.data[[i]]
rownames(scc.data[[i]]) <- paste(rownames(lig.data[[i]]),rownames(rec.data[[i]]),sep = '-')
colnames(scc.data[[i]]) <- paste(colnames(lig.data[[i]]),colnames(rec.data[[i]]),sep = '-')
sending.cell.idents[[i]] <- as.character(Idents(sys.small)[colnames(lig.data[[i]])])
receiving.cell.idents[[i]] <- as.character(Idents(sys.small)[colnames(rec.data[[i]])])
}
# Combine all of these to make the full SCC matrix
scc <- do.call(cbind,scc.data)
#Use this matrix to create a Seurat object:
demo <- CreateSeuratObject(counts = as.matrix(scc),assay = 'CellToCell')
# Gather and assemble metadata based on "ident" slot
sending.cell.idents.2 <- do.call(c,sending.cell.idents)
receiving.cell.idents.2 <- do.call(c,receiving.cell.idents)
meta.data.to.add <- data.frame(SendingType = sending.cell.idents.2,
ReceivingType = receiving.cell.idents.2)
rownames(meta.data.to.add) <- colnames(scc)
meta.data.to.add$VectorType <- paste(meta.data.to.add$SendingType,
meta.data.to.add$ReceivingType,
sep = '-')
#Add ident metadata
demo <- AddMetaData(demo,metadata = meta.data.to.add)
# Gather and assemble additional metadata
if (!is.null(meta.data.to.map)){
# Identify sending and receiving barcodes
sending.barcodes <- colnames(do.call(cbind,lig.data)) #This can be simplified if the above SCC construction is simplified
receiving.barcodes <- colnames(do.call(cbind,rec.data)) #This can be simplified if the above SCC construction is simplified
# Pull and format sending and receiving metadata
sending.metadata <- as.matrix(object@meta.data[,meta.data.to.map][sending.barcodes,])
receiving.metadata <- as.matrix(object@meta.data[,meta.data.to.map][receiving.barcodes,])
# Make joint metadata
datArray <- abind(sending.metadata,receiving.metadata,along=3)
joint.metadata <- as.matrix(apply(datArray,1:2,function(x)paste(x[1],"-",x[2])))
# Define column names
colnames(joint.metadata) <- paste(colnames(sending.metadata),'Joint',sep = '.')
colnames(sending.metadata) <- paste(colnames(sending.metadata),'Sending',sep='.')
colnames(receiving.metadata) <- paste(colnames(receiving.metadata),'Receiving',sep='.')
# Compile
meta.data.to.add.also <- cbind(sending.metadata,receiving.metadata,joint.metadata)
rownames(meta.data.to.add.also) <- paste(sending.barcodes,receiving.barcodes,sep='-')
# Add additional metadata
demo <- AddMetaData(demo,metadata = as.data.frame(meta.data.to.add.also))
}
# How many vectors were captured by this sampling?
message(paste("\n",ncol(demo),'Cell-To-Cell edges computed, sampling',length(unique(demo$VectorType)),'distinct VectorTypes, out of',length(table(Idents(sys.small)))^2,'total possible'))
return(demo)
}
# Testing runs
test <- RunSCC(FFPE2,species = 'mouse',position.x = 'x',position.y = 'y',
CellToCell = T,CellToSystem = T,SystemToCell = T,
CellToCellSpatial = F,CellToNeighborhood = F,NeighborhoodToCell = F,meta.data.to.map = c('nCount_SCT','orig.ident')) #works
# Data
load("~/Box Sync/Niklason Tissue Library/NN Rat Lungs/Cell Class Clustering - June 2020/Integration - Sam/nn.total.integration.SCT.save2.v2.Robj")
Idents(split.integrated)
VlnPlot(split.integrated,'Wnt2')
VlnPlot(split.integrated,'Ela')
VlnPlot(split.integrated,'Eln')
VlnPlot(split.integrated,'Eln',pt.size = 0)
VlnPlot(split.integrated,'Wnt11',pt.size = 0)
VlnPlot(split.integrated,'Fgf18',pt.size = 0)
VlnPlot(split.integrated,'ACta2',pt.size = 0)
VlnPlot(split.integrated,'Acta2',pt.size = 0)
VlnPlot(split.integrated,'Mhy11',pt.size = 0)
VlnPlot(split.integrated,'Myh11',pt.size = 0)
VlnPlot(split.integrated,'Pdgfra',pt.size = 0)
VlnPlot(split.integrated,'Fbln1',pt.size = 0)
require(SCC)
require(Seurat)
# Load Data
emb <- readRDS("~/Box Sync/Kluger_Lab/Spatial SCC/spatial_seurat_processed_main.rds")
#Pull out one slide only
FFPE2 <- subset(emb,idents=c("E10.5 tail"))
DefaultAssay(FFPE2) <- "RNA"
Idents(FFPE2) <- FFPE2$cell_label_dom
# Register position
FFPE2@meta.data$position <- gsub("_2","",colnames(FFPE2))
# Index position to x and y
temp <- data.frame(stringr::str_split_fixed(FFPE2$position,pattern = 'x',n = 2))
FFPE2$x <- temp$X1
FFPE2$y <- temp$X2
# Testing runs
test <- RunSCC(FFPE2,species = 'mouse',position.x = 'x',position.y = 'y',
CellToCell = T,CellToSystem = T,SystemToCell = T,
CellToCellSpatial = T,CellToNeighborhood = T,NeighborhoodToCell = T,meta.data.to.map = c('nCount_SCT','orig.ident')) #works
# Testing runs
test <- RunSCC(FFPE2,species = 'mouse',position.x = 'x',position.y = 'y',
CellToCell = T,CellToSystem = F,SystemToCell = F,
CellToCellSpatial = T,CellToNeighborhood = F,NeighborhoodToCell = F,meta.data.to.map = c('nCount_SCT','orig.ident')) #works
test
# Experiment
DefaultAssay(test) <- 'VectorType'
# Experiment
Idents(test) <- 'VectorType'
# Experiment
Idents(test[[1]]) <- 'VectorType'
Idents(test[[2]]) <- 'VectorType'
Idents(test[[1]])
table(Idents(test[[1]]))
table(Idents(test[[2]]))
samp1 <- subset(test[[1]],idents = 'Neural tube and notochord-Neural tube and notochord')
samp2 <- subset(test[[2]],idents = 'Neural tube and notochord-Neural tube and notochord')
merge <- merge(samp1,samp2)
samp1$Sample <- 'NonSpatial'
samp2$Sample <- 'Spatial'
merge <- merge(samp1,samp2)
Idents(merge) <- merge[['Sample']]
markers <- FindAllMarkers(merge,only.pos = !)
markers <- FindAllMarkers(merge,only.pos = 1)
markers <- FindAllMarkers(merge,only.pos = 1,min.pct = 0)
merge <- ScaleData(merge)
markers <- FindAllMarkers(merge,only.pos = 1,min.pct = 0,logfc.threshold = 0.1)
markers <- FindAllMarkers(merge,only.pos = 1,min.pct = 0,logfc.threshold = 0)
samp1 <- subset(test[[1]],idents = 'Neural tube and notochord-Mesenchymal')
samp1$Sample <- 'NonSpatial'
samp2 <- subset(test[[2]],idents = 'Neural tube and notochord-Mesenchymal')
samp2$Sample <- 'Spatial'
merge <- merge(samp1,samp2)
Idents(merge) <- merge[['Sample']]
merge <- ScaleData(merge)
markers <- FindAllMarkers(merge,only.pos = 1,min.pct = 0,logfc.threshold = 0)
merge <- NormalizeData(merge)
merge <- ScaleData(merge)
markers <- FindAllMarkers(merge,only.pos = 1,min.pct = 0,logfc.threshold = 0)
merge
table(Idents(test[[1]]))
table(Idents(test[[2]]))
markers <- FindAllMarkers(merge,min.pct = 0,logfc.threshold = 0)
View(markers)
markers <- FindAllMarkers(merge,min.pct = 0,logfc.threshold = 0,only.pos = T)
setwd("~/Documents/GitHub/SCC/R")
load("~/Box Sync/Science Response/Base objects for computational work (Use Human GEN2 for revision work)/objects/rat_cca 2018-08-04 .Robj")
rat_cca <- UpdateSeuratObject(rat_cca)
sending <- subset(rat_cca,idents = 'ATI')
sending <- subset(rat_cca,idents = 'ATI',downsample = 100)
sending
sending <- subset(rat_cca,idents = 'ATI',downsample = 300)
sending
sending <- subset(rat_cca,idents = 'EC_vasc',downsample = 300)
sending <- subset(rat_cca,idents = 'EC_cap',downsample = 300)
receiving <- subset(rat_cca,idents = 'EC_cap',downsample = 300)
sending <- subset(rat_cca,idents = 'ATI',downsample = 300)
receiving <- subset(rat_cca,idents = 'EC_cap',downsample = 300)
DoHeatmap(sending,'Vegfa')
DoHeatmap(sending,'Kdr')
DoHeatmap(receiving,'Kdr')
?DoHeatmap
DoHeatmap(sending,'Vegfa','Ager')
DoHeatmap(sending,c('Vegfa','Ager'))
DoHeatmap(sending,c('Vegfa'))
DoHeatmap(receiving,'Kdr')
DoHeatmap(receiving,'Map3k5')
DoHeatmap(receiving,c('Map3k5','Raf1'))
DoHeatmap(receiving,c('Map3k5','Raf1','Rock1'))
DoHeatmap(receiving,c('Map3k5','Raf1','Rock1','Rock2'))
DoHeatmap(receiving,c('Map3k5','Raf1','Rock1','Rock2','Plau'))
DoHeatmap(receiving,c('Map3k5','Raf1','Rock1','Rock2','Nos3'))
DoHeatmap(receiving,c('Map3k5','Raf1','Rock1','Rock2'))
sending@assays[['RNA']]@data['Vegfa',]
receiving@assays[['RNA']]@data['Kdr',]
DoHeatmap(receiving,downstream)
downstream <- c('Map3k5','Raf1','Rock1','Rock2')
DoHeatmap(receiving,downstream)
receiving@assays[['RNA']]@data[downstream,]
m1 <- sending@assays[['RNA']]@data['Vegfa',]
m2 < -receiving@assays[['RNA']]@data['Kdr',]
m1*m2
m1 <- sending@assays[['RNA']]@data['Vegfa',]
m2 < -receiving@assays[['RNA']]@data['Kdr',]
m1*m2
m2 <- receiving@assays[['RNA']]@data['Kdr',]
m1*m2
receiving
sending <- subset(rat_cca,idents = 'ATI',downsample = 200)
receiving <- subset(rat_cca,idents = 'EC_cap',downsample = 200)
m1 <- sending@assays[['RNA']]@data['Vegfa',]
m2 <- receiving@assays[['RNA']]@data['Kdr',]
m1*m2
m3 <- receiving@assays[['RNA']]@data[downstream,]
colMeans(m3)
m1*m2*colMeans(m3)
receiving$test <- m1*m2*colMeans(m3)
DoHeatmap(receiving, 'test')
